name: AudiRED Collection Kit
description: Toolkit used for AudiRED data collection from oneaudi repositories
inputs:
  github_token:
    description: "token used for accessing dependabot data inside repository"
    required: true
    type: string
  jest_coverage_file_path:
    description: "path to the top level temp folder where the coverage results can be found"
    required: false
    type: string
    default: coverage/coverage-summary.json
  lighthouse_coverage_file_path:
    description: "path to the top level temp folder where the coverage results can be found"
    required: false
    type: string
    default: .lighthouseci/assertion-results.json

runs:
  using: "composite"
  steps:
    - name: Unit Test (Jest) Coverage Collection
      shell: bash
      run: |
        if [ -z ${{ inputs.jest_coverage_file_path }} ]; then
            echo "jest_coverage_path input not provided, skipping"
            AVERAGE_COVERAGE=null
            UNIT_TEST_DATA=null
        else
            echo "Checking if Jest coverage file exists at: ${{ inputs.jest_coverage_file_path }}"
            ls -l ${{ inputs.jest_coverage_file_path }} || echo "File not found"
            if [ -f "${{ inputs.jest_coverage_file_path }}" ]; then
                echo "Raw coverage file contents:"
                cat ${{ inputs.jest_coverage_file_path }}
                LINES=$(jq -r '.total.lines.pct // "null"' < ./${{ inputs.jest_coverage_file_path }})
                STATEMENTS=$(jq -r '.total.statements.pct // "null"' < ./${{ inputs.jest_coverage_file_path }})
                FUNCTIONS=$(jq -r '.total.functions.pct // "null"' < ./${{ inputs.jest_coverage_file_path }})
                BRANCHES=$(jq -r '.total.branches.pct // "null"' < ./${{ inputs.jest_coverage_file_path }})

                echo "Extracted values:"
                echo "Lines: $LINES"
                echo "Statements: $STATEMENTS"
                echo "Functions: $FUNCTIONS"
                echo "Branches: $BRANCHES"

                is_number() {
                  [[ "$1" =~ ^[0-9]+(\.[0-9]+)?$ ]]
                }

                # Set to 0 if not a number
                if ! is_number "$LINES"; then
                  LINES=0
                fi

                if ! is_number "$STATEMENTS"; then
                  STATEMENTS=0
                fi

                if ! is_number "$FUNCTIONS"; then
                  FUNCTIONS=0
                fi

                if ! is_number "$BRANCHES"; then
                  BRANCHES=0
                fi

                echo "Line coverage: $LINES%"
                echo "Statement coverage: $STATEMENTS%"
                echo "Function coverage: $FUNCTIONS%"
                echo "Branch coverage: $BRANCHES%"
                
                AVERAGE_COVERAGE=$(echo "($LINES + $STATEMENTS + $FUNCTIONS + $BRANCHES) / 4" | bc -l)
                echo "Average coverage: $AVERAGE_COVERAGE%"

                UNIT_TEST_DATA=$(jq -n \
                  --arg lines "$LINES" \
                  --arg statements "$STATEMENTS" \
                  --arg functions "$FUNCTIONS" \
                  --arg branches "$BRANCHES" \
                  --arg average_coverage "$AVERAGE_COVERAGE" \
                  '{"line_coverage": ($lines | tonumber), "statement_coverage": ($statements | tonumber), "function_coverage": ($functions | tonumber), "branch_coverage": ($branches | tonumber), "average_coverage": ($average_coverage | tonumber)}  | @json')
            else
                echo "${{ inputs.jest_coverage_file_path }} is not found in the repository, skipping"
                AVERAGE_COVERAGE=null
                UNIT_TEST_DATA=null
            fi
        fi

         echo "UNIT_TEST_COVERAGE=$AVERAGE_COVERAGE" >> $GITHUB_ENV
         echo "UNIT_TEST_DATA=$UNIT_TEST_DATA" >> $GITHUB_ENV

    - name: Lighthouse Performance Collection
      shell: bash
      run: |
        if [ -z ${{ inputs.lighthouse_coverage_file_path }} ]; then
            echo "lighthouse_coverage_file_path input not provided, skipping"
            AVERAGE_COVERAGE=null
        else
            if [ -f "${{ inputs.lighthouse_coverage_file_path }}" ]; then
                RESULTS_ACTUAL=$(jq '.[0].actual' < ./${{ inputs.lighthouse_coverage_file_path }})

                if [ -z  "$RESULTS_ACTUAL" ]; then
                    RESULTS_ACTUAL=null
                else
                    echo "Results actual found: $RESULTS_ACTUAL%"
                fi
            else
                echo "${{ inputs.lighthouse_coverage_file_path }} is not found in the repository, skipping"
                RESULTS_ACTUAL=null
            fi
        fi

        echo "LIGHTHOUSE_SCORE=$RESULTS_ACTUAL" >> $GITHUB_ENV

    - name: Extract repo name from package.json of local repository
      shell: bash
      run: |
        repo_name=$(jq -r '.name' package.json)
        echo "repo_name=$repo_name" >> $GITHUB_ENV

    - name: Create report.json
      shell: bash
      run: |
        echo "{}" > report.json
        report_json=$(cat report.json)

        if [ -z "$UNIT_TEST_DATA" ] || [ "$UNIT_TEST_DATA" == "null" ]; then
            UNIT_TEST_DATA_PARSED=null
        else
            echo "about to parse UNIT_TEST_DATA"
            UNIT_TEST_DATA_PARSED=$(echo "$UNIT_TEST_DATA" | jq fromjson)
            echo "UNIT_TEST_DATA_PARSED: $
            "
        fi

        # Add a new entry for the repository in report.json
        updated_report=$(echo "$report_json" | jq --arg repo_name "$repo_name" \
            --argjson lighthouse_score "$LIGHTHOUSE_SCORE" \
            --argjson unit_test_coverage "$UNIT_TEST_COVERAGE" \
            --argjson unit_test_coverage_data "$UNIT_TEST_DATA_PARSED" \
            '. + {($repo_name): {"lighthouse_score": $lighthouse_score, "unit_test_coverage": $unit_test_coverage, "unit_test_coverage_data": $unit_test_coverage_data}}')

        # Write the updated report back to the report file
        echo "$updated_report" > report.json

    - name: Upload report.json
      uses: actions/upload-artifact@v4.3.1
      with:
        name: audired-collection-report
        path: report.json
