name: AudiRED Collection Kit
description: Toolkit used for AudiRED data collection from oneaudi repositories
inputs:
  jest_coverage_path:
      description: 'path to the top level temp folder where the coverage results can be found'
      required: false
      type: string
  lighthouse_coverage_path:
      description: 'path to the top level temp folder where the coverage results can be found'
      required: false
      type: string

runs:
  using: "composite"
  steps:
    - name: Unit Test (Jest) Coverage Collection
      if: ${{ inputs.jest_coverage_path }}
      shell: bash
      run: |
        LINES=$(jq '.total.lines.pct' < ./${{ inputs.jest_coverage_path }}/coverage-summary.json)
        STATEMENTS=$(jq '.total.statements.pct' < ./${{ inputs.jest_coverage_path }}/coverage-summary.json)
        FUNCTIONS=$(jq '.total.functions.pct' < ./${{ inputs.jest_coverage_path }}/coverage-summary.json)
        BRANCHES=$(jq '.total.branches.pct' < ./${{ inputs.jest_coverage_path }}/coverage-summary.json)

        echo "Line coverage: $LINES%"
        echo "Statement coverage: $STATEMENTS%"
        echo "Function coverage: $FUNCTIONS%"
        echo "Branch coverage: $BRANCHES%"

        AVERAGE_COVERAGE=$(echo "($LINES + $STATEMENTS + $FUNCTIONS + $BRANCHES) / 4" | bc -l)

        echo "Average coverage: $AVERAGE_COVERAGE%"

        # Fail the job if the average coverage is below 80%
        if (( $(echo "$AVERAGE_COVERAGE > 80" | bc -l) )); then
            echo "Wahoo! Average jest test coverage is above 80%. Assigning gold badge"
        elif (( $(echo "$AVERAGE_COVERAGE > 60" | bc -l) )); then
            echo "Good job! Results actual is above 60%. Assigning silver badge"
        else
            echo "Results actual needs to be higher. Assigning bronze badge."
        fi
    - name: Lighthouse Performance Collection
      if: ${{ inputs.lighthouse_coverage_path }}
      shell: bash
      run: |
        # Extract the coverage percentages for lines, statements, functions, and branches
        RESULTS_ACTUAL=$(jq '.[0].actual' < ./${{ lighthouse_coverage_path }}/assertion-results.json)

        if [ -z  "$RESULTS_ACTUAL" ]; then
            echo "No lighthouse data available"
        else
            echo "Results actual found: $RESULTS_ACTUAL%"
            if (( $(echo "$RESULTS_ACTUAL > 80" | bc -l) )); then
                echo "Results actual is above 80%. Assigning gold badge"
            elif (( $(echo "$RESULTS_ACTUAL > 60" | bc -l) )); then
                echo "Results actual is above 60%. Assigning silver badge"
            else
                echo "Results actual needs to be higher. Assigning bronze badge."
            fi
        fi