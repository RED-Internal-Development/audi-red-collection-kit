name: AudiRED Collection Kit
description: Toolkit used for AudiRED data collection from oneaudi repositories
inputs:
    github_token:
        description: 'token used for accessing dependabot data inside repository'
        required: true
        type: string
    jest_coverage_file_path:
        description: 'path to the top level temp folder where the coverage results can be found'
        required: false
        type: string
    lighthouse_coverage_file_path:
        description: 'path to the top level temp folder where the coverage results can be found'
        required: false
        type: string
    enable_zap_scan:
        description: 'enable or disable ZAP Full Scan step'
        required: false
        type: boolean
        default: false
    zap_timeout:
        description: 'timeout for the ZAP pentest scan'
        required: false
        type: string
        default: '150'
    zap_blacklist:
        description: 'comma-separated URLs that should be ignored by the pentester'
        required: false
        type: string
        default: 'audiusa.com,audi.de,audi.ca,mediaservice.audi.com,.*\\.one\\.audi'
    zap_target:
        description: 'target URL for the ZAP pentest'
        required: false
        type: string
        default: "127.0.0.1:3000"
    zap_command:
        description: 'command to execute before running the ZAP scan'
        required: false
        type: string
        default: 'npm run serve'

runs:
  using: "composite"
  steps:

    - name: Check for appstore in package.json
      id: check_appstore
      run: |
        if jq -e '.appstore' package.json >/dev/null 2>&1; then
          echo "appstore_exists=true" >> "$GITHUB_ENV"
          echo "::set-output name=appstore_exists::true"
        else
          echo "appstore_exists=false" >> "$GITHUB_ENV"
          echo "::set-output name=appstore_exists::false"
        fi
      shell: bash

    - name: Run Custom Command Before ZAP Scan
      if: ${{ contains(fromJson(steps.check_appstore.outputs.appstore_exists), 'true') }}
      shell: bash
      run: |
        if [ -n "${{ inputs.zap_command }}" ]; then
          echo "Running pre-scan command: ${{ inputs.zap_command }}"
          eval "${{ inputs.zap_command }}"
          sleep 15
        else
          echo "No pre-scan command provided, skipping."
        fi
      env:
        APPSTORE_EXISTS: ${{ steps.check_appstore.outputs.appstore_exists }}

    - name: Run ZAP Full Scan
      if: ${{ contains(fromJson(steps.check_appstore.outputs.appstore_exists), 'true') }}
      uses: zaproxy/action-full-scan@latest
      with:
        target: ${{ inputs.zap_target }}
        allow_issue_writing: false
        fail_action: false
        token: ${{ inputs.github_token }}
        cmd_options: "-a -m ${{ inputs.zap_timeout }} -J zapReport.json"
        blacklist: ${{ inputs.zap_blacklist }}
      env:
        APPSTORE_EXISTS: ${{ steps.check_appstore.outputs.appstore_exists }}

    - name: Unit Test (Jest) Coverage Collection
      shell: bash
      run: |
        if [ -z ${{ inputs.jest_coverage_file_path }} ]; then
            echo "jest_coverage_path input not provided, skipping"
            AVERAGE_COVERAGE=null 
        else
            if [ -f "${{ inputs.jest_coverage_file_path }}" ]; then
                LINES=$(jq '.total.lines.pct' < ./${{ inputs.jest_coverage_file_path }})
                STATEMENTS=$(jq '.total.statements.pct' < ./${{ inputs.jest_coverage_file_path }})
                FUNCTIONS=$(jq '.total.functions.pct' < ./${{ inputs.jest_coverage_file_path }})
                BRANCHES=$(jq '.total.branches.pct' < ./${{ inputs.jest_coverage_file_path }})

                echo "Line coverage: $LINES%"
                echo "Statement coverage: $STATEMENTS%"
                echo "Function coverage: $FUNCTIONS%"
                echo "Branch coverage: $BRANCHES%"

                AVERAGE_COVERAGE=$(echo "($LINES + $STATEMENTS + $FUNCTIONS + $BRANCHES) / 4" | bc -l)

                echo "Average coverage: $AVERAGE_COVERAGE%"
            else
                echo "${{ inputs.jest_coverage_file_path }} is not found in the repository, skipping"
                AVERAGE_COVERAGE=null
            fi
        fi

         echo "UNIT_TEST_COVERAGE=$AVERAGE_COVERAGE" >> $GITHUB_ENV
    
    - name: E2E (Cypress) Coverage Collection
      shell: bash
      run: |
        if [ -d ".nyc_output" ]; then
            COVERAGE_OUTPUT=$(npx nyc report --reporter=text-summary)

            echo "Coverage Output: $COVERAGE_OUTPUT"

            STATEMENTS=$(echo "$COVERAGE_OUTPUT" | grep -oP 'Statements\s+:\s+\K[0-9.]+')
            BRANCHES=$(echo "$COVERAGE_OUTPUT" | grep -oP 'Branches\s+:\s+\K[0-9.]+')
            FUNCTIONS=$(echo "$COVERAGE_OUTPUT" | grep -oP 'Functions\s+:\s+\K[0-9.]+')
            LINES=$(echo "$COVERAGE_OUTPUT" | grep -oP 'Lines\s+:\s+\K[0-9.]+')

            echo "Line coverage: $LINES%"
            echo "Statement coverage: $STATEMENTS%"
            echo "Function coverage: $FUNCTIONS%"
            echo "Branch coverage: $BRANCHES%"

            AVERAGE_COVERAGE=$(echo "($LINES + $STATEMENTS + $FUNCTIONS + $BRANCHES) / 4" | bc -l)

            echo "Average coverage: $AVERAGE_COVERAGE%"
        else
            echo ".nyc_output folder does not exist for coverage reporting"
            AVERAGE_COVERAGE=null
        fi

        echo "E2E_TEST_COVERAGE=$AVERAGE_COVERAGE" >> $GITHUB_ENV

    - name: Lighthouse Performance Collection
      shell: bash
      run: |
        if [ -z ${{ inputs.lighthouse_coverage_file_path }} ]; then
            echo "lighthouse_coverage_file_path input not provided, skipping"
            AVERAGE_COVERAGE=null 
        else
            if [ -f "${{ inputs.lighthouse_coverage_file_path }}" ]; then
                RESULTS_ACTUAL=$(jq '.[0].actual' < ./${{ inputs.lighthouse_coverage_file_path }})

                if [ -z  "$RESULTS_ACTUAL" ]; then
                    RESULTS_ACTUAL=null
                else
                    echo "Results actual found: $RESULTS_ACTUAL%"
                fi
            else
                echo "${{ inputs.lighthouse_coverage_file_path }} is not found in the repository, skipping"
                RESULTS_ACTUAL=null
            fi
        fi

        echo "LIGHTHOUSE_SCORE=$RESULTS_ACTUAL" >> $GITHUB_ENV
    
    - name: Get all open PRs created by Dependabot
      shell: bash
      run: |
        PRS=$(gh pr list --author dependabot[bot] --state open --json title,url,createdAt --jq '.[] | "\(.title) - \(.url) - Created at: \(.createdAt)"')
        
        if [ -z "$PRS" ]; then
            echo "No open Dependabot PRs found."
            exit 0
        else
            echo "Open Dependabot PRs:"
            echo "$PRS"

        dependabot_array=()
        while IFS= read -r line; do
            dependabot_array+=("\"$line\"")
            done <<< "$PRS"
            DEPENDABOT_PRS=$(IFS=,; echo "${dependabot_array[*]}")
            echo "DEPENDABOT_PRS=[${DEPENDABOT_PRS}]" >> $GITHUB_ENV
        fi
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Extract dependencies from package.json of local repository
      shell: bash
      run: |
        repo_name=$(jq -r '.name' package.json)
        dependencies=$(jq '.dependencies' package.json | jq tostring)
        devDependencies=$(jq '.devDependencies' package.json | jq tostring)
        repository=$(jq '.repository' package.json | jq tostring)
        
        if [ -f zapReport.json ]; then
            pentest_report=$(cat zapReport.json)
        else
            pentest_report="{}"
        fi

        echo "repo_name=$repo_name" >> $GITHUB_ENV
        echo "dependencies=$dependencies" >> $GITHUB_ENV
        echo "devDependencies=$devDependencies" >> $GITHUB_ENV
        echo "repository=$repository" >> $GITHUB_ENV
        echo "pentest_report=$pentest_report" >> $GITHUB_ENV

    - name: Create report.json
      shell: bash
      run: |
        echo "{}" > report.json
        report_json=$(cat report.json)

        dependencies_parsed=$(echo "$dependencies" | jq fromjson)
        dev_dependencies_parsed=$(echo "$devDependencies" | jq fromjson)
        repository_parsed=$(echo "$repository" | jq fromjson)
        dependabot_array_json=[]

        if [ -z "$DEPENDABOT_PRS" ]; then
            echo "No dependabot PR data to include"
        else
            dependabot_array_json="${DEPENDABOT_PRS}"
        fi

        # Add a new entry for the repository in report.json
        updated_report=$(echo "$report_json" | jq --arg repo_name "$repo_name" \
            --argjson dependencies "$dependencies_parsed" \
            --argjson devDependencies "$dev_dependencies_parsed" \
            --argjson repository "$repository_parsed" \
            --argjson dependabot_prs "$dependabot_array_json" \
            --argjson lighthouse_score "$LIGHTHOUSE_SCORE" \
            --argjson unit_test_coverage "$UNIT_TEST_COVERAGE" \
            --argjson e2e_test_coverage "$E2E_TEST_COVERAGE" \
            --argjson pentestreport "$pentest_report" \
            '. + {($repo_name): { "dependencies": $dependencies, "devDependencies": $devDependencies, "repository": $repository, "dependabot_prs": $dependabot_prs, "lighthouse_score": $lighthouse_score, "unit_test_coverage": $unit_test_coverage, "e2e_test_coverage": $e2e_test_coverage, "pentestreport": $pentestreport }}')

        # Write the updated report back to the report file
        echo "$updated_report" > report.json
    
    - name: Upload report.json
      uses: actions/upload-artifact@v4.3.1
      with:
        name: audired-collection-report
        path: report.json