name: AudiRED Collection Kit
description: Toolkit used for AudiRED data collection from oneaudi repositories
inputs:
  github_token:
    description: "token used for accessing dependabot data inside repository"
    required: true
    type: string
  jest_coverage_file_path:
    description: "path to the top level temp folder where the coverage results can be found"
    required: false
    type: string
  lighthouse_coverage_file_path:
    description: "path to the top level temp folder where the coverage results can be found"
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: Unit Test (Jest) Coverage Collection
      shell: bash
      run: |
        if [ -z ${{ inputs.jest_coverage_file_path }} ]; then
            echo "jest_coverage_path input not provided, skipping"
            AVERAGE_COVERAGE=null 
        else
            if [ -f "${{ inputs.jest_coverage_file_path }}" ]; then
                LINES=$(jq '.total.lines.pct' < ./${{ inputs.jest_coverage_file_path }})
                STATEMENTS=$(jq '.total.statements.pct' < ./${{ inputs.jest_coverage_file_path }})
                FUNCTIONS=$(jq '.total.functions.pct' < ./${{ inputs.jest_coverage_file_path }})
                BRANCHES=$(jq '.total.branches.pct' < ./${{ inputs.jest_coverage_file_path }})

                echo "Line coverage: $LINES%"
                echo "Statement coverage: $STATEMENTS%"
                echo "Function coverage: $FUNCTIONS%"
                echo "Branch coverage: $BRANCHES%"

                AVERAGE_COVERAGE=$(echo "($LINES + $STATEMENTS + $FUNCTIONS + $BRANCHES) / 4" | bc -l)

                echo "Average coverage: $AVERAGE_COVERAGE%"
            else
                echo "${{ inputs.jest_coverage_file_path }} is not found in the repository, skipping"
                AVERAGE_COVERAGE=null
            fi
        fi

         echo "UNIT_TEST_COVERAGE=$AVERAGE_COVERAGE" >> $GITHUB_ENV

    - name: E2E (Cypress) Coverage Collection
      shell: bash
      run: |
        if [ -d ".nyc_output" ]; then
            COVERAGE_OUTPUT=$(npx nyc report --reporter=text-summary)

            echo "Coverage Output: $COVERAGE_OUTPUT"

            STATEMENTS=$(echo "$COVERAGE_OUTPUT" | grep -oP 'Statements\s+:\s+\K[0-9.]+')
            BRANCHES=$(echo "$COVERAGE_OUTPUT" | grep -oP 'Branches\s+:\s+\K[0-9.]+')
            FUNCTIONS=$(echo "$COVERAGE_OUTPUT" | grep -oP 'Functions\s+:\s+\K[0-9.]+')
            LINES=$(echo "$COVERAGE_OUTPUT" | grep -oP 'Lines\s+:\s+\K[0-9.]+')

            echo "Line coverage: $LINES%"
            echo "Statement coverage: $STATEMENTS%"
            echo "Function coverage: $FUNCTIONS%"
            echo "Branch coverage: $BRANCHES%"

            AVERAGE_COVERAGE=$(echo "($LINES + $STATEMENTS + $FUNCTIONS + $BRANCHES) / 4" | bc -l)

            echo "Average coverage: $AVERAGE_COVERAGE%"
        else
            echo ".nyc_output folder does not exist for coverage reporting"
            AVERAGE_COVERAGE=null
        fi

        echo "E2E_TEST_COVERAGE=$AVERAGE_COVERAGE" >> $GITHUB_ENV

    - name: Lighthouse Performance Collection
      shell: bash
      run: |
        if [ -z ${{ inputs.lighthouse_coverage_file_path }} ]; then
            echo "lighthouse_coverage_file_path input not provided, skipping"
            AVERAGE_COVERAGE=null 
        else
            if [ -f "${{ inputs.lighthouse_coverage_file_path }}" ]; then
                RESULTS_ACTUAL=$(jq '.[0].actual' < ./${{ inputs.lighthouse_coverage_file_path }})

                if [ -z  "$RESULTS_ACTUAL" ]; then
                    RESULTS_ACTUAL=null
                else
                    echo "Results actual found: $RESULTS_ACTUAL%"
                fi
            else
                echo "${{ inputs.lighthouse_coverage_file_path }} is not found in the repository, skipping"
                RESULTS_ACTUAL=null
            fi
        fi

        echo "LIGHTHOUSE_SCORE=$RESULTS_ACTUAL" >> $GITHUB_ENV

    - name: Get all open PRs created by Dependabot
      shell: bash
      run: |
        PRS=$(gh pr list --author dependabot[bot] --state open --json title,url,createdAt --jq '.[] | "\(.title) - \(.url) - Created at: \(.createdAt)"')

        if [ -z "$PRS" ]; then
            echo "No open Dependabot PRs found."
            exit 0
        else
            echo "Open Dependabot PRs:"
            echo "$PRS"

        dependabot_array=()
        while IFS= read -r line; do
            dependabot_array+=("\"$line\"")
            done <<< "$PRS"
            DEPENDABOT_PRS=$(IFS=,; echo "${dependabot_array[*]}")
            echo "DEPENDABOT_PRS=[${DEPENDABOT_PRS}]" >> $GITHUB_ENV
        fi
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Get release history info
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "Checking GitHub authentication..."
        gh auth status || { echo "Authentication failed"; exit 1; }

        echo "Fetching repository details..."
        gh repo view || { echo "Repository access failed"; exit 1; }

        echo "Fetching latest release..."
        LATEST_VERSION=$(gh release view --json tagName -q '.tagName' 2>/dev/null || echo "")

        echo "Fetching full release history..."
        RELEASE_HISTORY=$(gh api repos/${{ github.repository }}/releases --jq '[.[] | {tag: .tag_name, name: .name, date: .published_at, notes: .body}]' 2>/dev/null || echo "")

        echo "LATEST_VERSION: $LATEST_VERSION"
        echo "RELEASE_HISTORY: $RELEASE_HISTORY"

        if [ -z "$LATEST_VERSION" ]; then
            echo "No releases found or latest release fetch failed."
            LATEST_VERSION="null"
        fi

        if [ -z "$RELEASE_HISTORY" ] || [ "$RELEASE_HISTORY" = "[]" ]; then
            echo "No releases found or release history fetch failed."
            RELEASE_HISTORY="[]"
        else
            echo "Release history successfully fetched!"
        fi

        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        echo "RELEASE_HISTORY<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_HISTORY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Get latest release info
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }} 
      run: |
        LATEST_VERSION=$(gh release view --json tagName -q '.tagName' 2>/dev/null || echo "")
        RELEASE_HISTORY=$(gh api repos/${{ github.repository }}/releases --jq '[.[] | {tag: .tag_name, name: .name, date: .published_at, notes: .body}]' 2>/dev/null || echo "")

        if [ -z "$LATEST_VERSION" ]; then
            echo "No releases found."
            LATEST_VERSION="null"
        fi

        if [ -z "$RELEASE_NOTES" ]; then
            echo "No releases found."
            RELEASE_NOTES="[]"
        else
            echo "Latest release notes: $RELEASE_NOTES"
        fi

        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Extract dependencies from package.json of local repository
      shell: bash
      run: |
        repo_name=$(jq -r '.name' package.json)
        repo_version=$(jq -r '.version' package.json)
        dependencies=$(jq '.dependencies' package.json | jq tostring)
        devDependencies=$(jq '.devDependencies' package.json | jq tostring)
        appstoreData=$(jq '.appStore // {}' package.json | jq tostring)
        browserlistData=$(jq '.browserslist // {}' package.json | jq tostring)
        repository=$(jq '.repository' package.json | jq tostring)

        echo "repo_name=$repo_name" >> $GITHUB_ENV
        echo "repo_version=$repo_version" >> $GITHUB_ENV
        echo "dependencies=$dependencies" >> $GITHUB_ENV
        echo "devDependencies=$devDependencies" >> $GITHUB_ENV
        echo "appstoreData=$appstoreData" >> $GITHUB_ENV
        echo "browserlistData=$browserlistData" >> $GITHUB_ENV
        echo "repository=$repository" >> $GITHUB_ENV

    - name: Create report.json
      shell: bash
      run: |
        echo "{}" > report.json
        report_json=$(cat report.json)

        dependencies_parsed=$(echo "$dependencies" | jq fromjson)
        dev_dependencies_parsed=$(echo "$devDependencies" | jq fromjson)
        repository_parsed=$(echo "$repository" | jq fromjson)
        dependabot_prs_json=[]
        if [ -z "$DEPENDABOT_PRS" ]; then
            echo "No dependabot PR data to include"
        else
            dependabot_prs_json="${DEPENDABOT_PRS}"
        fi
        appstore_data_parsed=$(echo "$appstoreData" | jq fromjson)
        browserlist_data_parsed=$(echo "$browserlistData" | jq fromjson)

        # Add a new entry for the repository in report.json
        updated_report=$(echo "$report_json" | jq --arg repo_name "$repo_name" \
            --arg repo_version "$repo_version" \
            --arg published_version "$LATEST_VERSION" \
            --argjson release_notes "$RELEASE_NOTES" \
            --argjson dependencies "$dependencies_parsed" \
            --argjson devDependencies "$dev_dependencies_parsed" \
            --argjson repository "$repository_parsed" \
            --argjson dependabot_prs "$dependabot_prs_json" \
            --argjson lighthouse_score "$LIGHTHOUSE_SCORE" \
            --argjson unit_test_coverage "$UNIT_TEST_COVERAGE" \
            --argjson e2e_test_coverage "$E2E_TEST_COVERAGE" \
            --argjson appstoreData "$appstore_data_parsed" \
            --argjson browserlistData "$browserlist_data_parsed" \
            '. + {($repo_name): {"repo_version": $repo_version, "published_version": $published_version, "dependencies": $dependencies, "devDependencies": $devDependencies, "repository": $repository, "dependabot_prs": $dependabot_prs, "lighthouse_score": $lighthouse_score, "unit_test_coverage": $unit_test_coverage, "e2e_test_coverage": $e2e_test_coverage, "appstoreData": $appstoreData, "browserlistData": $browserlistData, "release_notes": $release_notes}}')

        # Write the updated report back to the report file
        echo "$updated_report" > report.json

    - name: Upload report.json
      uses: actions/upload-artifact@v4.3.1
      with:
        name: audired-collection-report
        path: report.json
